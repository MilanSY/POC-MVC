<?php
/**
 * Script d'initialisation de la base de donn√©es
 * Cr√©e la base de donn√©es et execute le script SQL
 */

require_once 'DatabaseParam.php';

try {
    // Configuration de la base de donn√©es depuis DatabaseParam.php
    echo "üîÑ Connexion au serveur MySQL...\n";
    
    // Connexion au serveur MySQL (sans sp√©cifier de base de donn√©es)
    $pdo = new PDO("mysql:host=$host;charset=utf8mb4", $username, $password, [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
    ]);

    echo "‚úÖ Connexion r√©ussie au serveur MySQL\n";

    // Cr√©er la base de donn√©es si elle n'existe pas
    echo "üîÑ Cr√©ation de la base de donn√©es '$dbname'...\n";
    $pdo->exec("CREATE DATABASE IF NOT EXISTS $dbname CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci");
    echo "‚úÖ Base de donn√©es '$dbname' cr√©√©e ou existe d√©j√†\n";

    // Se connecter √† la base de donn√©es
    $pdo->exec("USE $dbname");
    
    // Lire et ex√©cuter le fichier SQL
    echo "üîÑ Lecture du fichier database.sql...\n";
    $sqlContent = file_get_contents('database.sql');
    
    if ($sqlContent === false) {
        throw new Exception("Impossible de lire le fichier database.sql");
    }

    echo "üîÑ Ex√©cution du script SQL...\n";
    
    // Am√©liorer le parsing des requ√™tes SQL
    // Supprimer les commentaires en d√©but de ligne
    $lines = explode("\n", $sqlContent);
    $cleanedLines = [];
    
    foreach ($lines as $line) {
        $trimmedLine = trim($line);
        // Ignorer les lignes vides et les commentaires
        if (!empty($trimmedLine) && !preg_match('/^\s*--/', $trimmedLine)) {
            $cleanedLines[] = $line;
        }
    }
    
    $cleanedContent = implode("\n", $cleanedLines);
    
    // Diviser en requ√™tes en utilisant le point-virgule suivi d'une nouvelle ligne
    $queries = preg_split('/;\s*\n\s*/', $cleanedContent);
    
    foreach ($queries as $query) {
        $query = trim($query);
        if (!empty($query)) {
            try {
                $pdo->exec($query);
                // Optionnel: afficher le d√©but de chaque requ√™te ex√©cut√©e
                $queryStart = substr(preg_replace('/\s+/', ' ', $query), 0, 50);
                echo "   ‚úì " . $queryStart . "...\n";
            } catch (PDOException $e) {
                echo "‚ö†Ô∏è  Erreur lors de l'ex√©cution d'une requ√™te: " . $e->getMessage() . "\n";
                echo "Requ√™te: " . substr($query, 0, 200) . "...\n";
                // Continue avec les autres requ√™tes
            }
        }
    }

    echo "‚úÖ Script SQL ex√©cut√© avec succ√®s\n";

    // V√©rifier que les tables ont √©t√© cr√©√©es
    echo "üîÑ V√©rification des tables cr√©√©es...\n";
    $stmt = $pdo->query("SHOW TABLES");
    $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);
    
    echo "üìã Tables cr√©√©es:\n";
    foreach ($tables as $table) {
        echo "   - $table\n";
    }

    // Compter les donn√©es
    echo "\nüìä Statistiques des donn√©es:\n";
    foreach (['medias', 'books', 'movies', 'albums', 'songs', 'users'] as $table) {
        if (in_array($table, $tables)) {
            $stmt = $pdo->query("SELECT COUNT(*) FROM $table");
            $count = $stmt->fetchColumn();
            echo "   - $table: $count enregistrement(s)\n";
        }
    }
    
    // V√©rifications sp√©ciales pour l'authentification
    if (in_array('users', $tables)) {
        echo "\nüîê Syst√®me d'authentification:\n";
        echo "   ‚úÖ Table 'users' cr√©√©e\n";
        echo "   üåê Inscription: http://localhost:8000/register\n";
        echo "   üîë Connexion: http://localhost:8000/login\n";
    }

    echo "\nüéâ Initialisation de la base de donn√©es termin√©e avec succ√®s!\n";
    echo "Vous pouvez maintenant utiliser l'application sur http://localhost:8000\n";

} catch (Exception $e) {
    echo "‚ùå Erreur: " . $e->getMessage() . "\n";
    echo "Assurez-vous que MySQL est d√©marr√© et que les param√®tres de connexion sont corrects.\n";
    exit(1);
}